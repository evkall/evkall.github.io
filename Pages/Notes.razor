@page "/notes"
@inject HttpClient Http

@if (notes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        @foreach (var post in data)
        {
            <tr>
                @post
            </tr>
        }
    </table>
}

@code {
    private string[] notes;
    private List<MarkupString> data = new List<MarkupString>();

    protected override async Task OnInitializedAsync()
    {
        notes = await Http.GetFromJsonAsync<string[]>("note-raw/note-names.json");
        foreach (var note in notes)
        {
            data.Add(await toHtml(await Http.GetStringAsync($"note-raw/{note}")));
        }
    }

    public async Task<MarkupString> toHtml(string data)
    {
        var pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
        var result = await Task.Run(() => Markdown.ToHtml(data, pipeline));
        
        return (MarkupString)result;
    }
}